[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[section:motivation Motivation]

In order to support a broad range of execution control behaviour the coroutine
types of __scoro__ and __acoro__ can be used to ['escape-and-reenter] loops, to
['escape-and-reenter] recursive computations and for ['cooperative] multitasking
helping to solve problems in a much simpler and more elegant way than with only
a single flow of control.

[heading event-driven model]

In the event-driven model multiple independent sources are managed by a central
event-loop waiting on all external sources. The event-loop invokes a callback
function to process the data of an event.
The downside of the event-driven model consists in a sub-optimal program
structure. A event-driven program is required to splitt its code into
multiple small callback functions. A algorithm that would usually expressed as
a sequence of fucntions and loops must be transformed into callbacks. The
complete state has to be stored into a data structure while the control flow
returns to the envent-loop.
The use of local variables, while/for loops, recursions etc. together with the
event-loop is not possible. The code becomes less expressive.
A combination of event-driven model and coroutines removes the drawbacks and
ebables to write code.


[endsect]
